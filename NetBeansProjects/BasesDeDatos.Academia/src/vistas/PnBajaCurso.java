/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controlador.Conexion;
import controlador.GestorTablaAlumno;
import controlador.GestorTablaCurso;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import modelo.Alumno;
import modelo.Curso;

/**
 *
 * @author Mario
 */
public class PnBajaCurso extends javax.swing.JPanel {

    private Conexion bd;
    DefaultComboBoxModel modelo;
    Curso miCurso;
    Curso miCurso2;
    ArrayList<Curso> cursosRecuperados;
    int longitudActual;
    int longitudVieja;

    /*ArrayList<Alumno> alumnos;
    GestorTablaAlumno a;*/

    /**
     * Creates new form PnBajaCurso
     */
    public PnBajaCurso(ArrayList<Curso> cursosRecuperados) {
        initComponents();
        bd = new Conexion();
        modelo = new DefaultComboBoxModel();
        cmbCursos.setModel(modelo);
        int resultado = bd.establecer("jdbc:mysql://localhost:3306/programacion");// lo último es el nombre de la base de datos
        if (resultado != 0) {
            JOptionPane.showMessageDialog(this, "CONEXIÓN INCORRECTA");
            System.exit(0);
        }
        this.cursosRecuperados=cursosRecuperados;
        if (cursosRecuperados.size() != 0) {
            btnDeshacer.setEnabled(true);
        }else{
            btnDeshacer.setEnabled(false);
        }
        //cursosRecuperados = new ArrayList();// para que me la cree una sola vez y no me borre lo que contiene
        //btnDeshacer.setEnabled(false);
        cargarCursos();
        // cargarAlumnos();
    }

    private void cargarCursos() {
        GestorTablaCurso c = new GestorTablaCurso(bd);
        ArrayList<Curso> cursos;
        //lo hago así por un comboBox no es compatible con la clase GestorTablaAcademia
        cursos = c.consultaTodosCursos();
        for (int i = 0; i < cursos.size(); i++) {
            modelo.addElement(cursos.get(i));
        }
        //cmbCurso.setSelectedIndex(0);//así le digo que empieze en la posicion 0
    }

    private void cargarCursosRecuperados() {
        GestorTablaCurso c = new GestorTablaCurso(bd);
        int a = 0;
        //lo hago así por un comboBox no es compatible con la clase GestorTablaAcademia
        cursosRecuperados.get(a);
        for (a = 0; a < cursosRecuperados.size(); a++) {
            modelo.addElement(cursosRecuperados.get(a));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNPlazas = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        cmbCursos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        btnDeshacer = new javax.swing.JButton();

        jLabel2.setText("DENOMINACIÓN");

        jLabel3.setText("Nº PLAZAS");

        jLabel4.setText("CÓDIGO");

        txtNPlazas.setEditable(false);

        txtCodigo.setEditable(false);

        cmbCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCursosActionPerformed(evt);
            }
        });

        jLabel1.setText("BAJA DE CURSOS");

        btnBorrar.setText("BORRAR");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnDeshacer.setText("DESHACER");
        btnDeshacer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeshacerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(68, 68, 68)
                                .addComponent(txtNPlazas))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(79, 79, 79)
                                .addComponent(txtCodigo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(48, 48, 48)
                                .addComponent(cmbCursos, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(btnBorrar)
                        .addGap(62, 62, 62)
                        .addComponent(btnDeshacer)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbCursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNPlazas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(btnDeshacer))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        int pos = cmbCursos.getSelectedIndex();
        String codigo;
        boolean HayAlumnos;
        GestorTablaCurso migestor = new GestorTablaCurso(bd);
        ArrayList<Curso> cursos1;
        cursos1 = migestor.consultaTodosCursos();
        longitudVieja = cursos1.size();//ME DA LA TODOS LOS CURSOS QUE HAY ANTES DE BORRAR ALGUNO

        miCurso = (Curso) modelo.getSelectedItem();
        codigo = miCurso.getCodCurso();
        String codigoGuardado = miCurso.getCodCurso();
        int NPlazasGuardado = Integer.valueOf(miCurso.getnPlazasDisp());
        String denominacionGuardado = miCurso.getDenominacion();

        HayAlumnos = migestor.tieneSocios(codigo);

        if (HayAlumnos == true) {
            JOptionPane.showMessageDialog(this, "NO SE PUEDE BORRAR. HAY ALUMNOS MATRICULADOS");
            modelo.removeAllElements();
        } else {

            migestor.borrarCurso(codigo);
            JOptionPane.showMessageDialog(this, "BORRADO CORRECTO");

            cursos1 = migestor.consultaTodosCursos();
            longitudActual = cursos1.size();//ME DA LA TODOS LOS CURSOS QUE HAY DESPUÉS DE BORRAR ALGUNO

            miCurso2 = new Curso(codigoGuardado, denominacionGuardado, NPlazasGuardado);
            GestorTablaCurso c = new GestorTablaCurso(bd);
            cursosRecuperados.add(miCurso2);
            btnDeshacer.setEnabled(true);
            modelo.removeAllElements();
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void cmbCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCursosActionPerformed
        comboBoxCurso();
    }//GEN-LAST:event_cmbCursosActionPerformed

    private void btnDeshacerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeshacerActionPerformed
        if (cursosRecuperados.size() > 0) {
            GestorTablaCurso tabla = new GestorTablaCurso(bd);
            cargarCursosRecuperados();

            for (int a = 0; a < cursosRecuperados.size(); a++) {
                tabla.grabarCurso(cursosRecuperados.get(a).getCodCurso(), cursosRecuperados.get(a).getDenominacion(), cursosRecuperados.get(a).getnPlazasDisp());
            }
            /*volvemos a crear el arrayList porque vez que ya
            hemos recuperado los cursos, la copia de seguridad se elimina*/
            cursosRecuperados = new ArrayList();
        }
            btnDeshacer.setEnabled(false);
        
    }//GEN-LAST:event_btnDeshacerActionPerformed

    public void comboBoxCurso() {
        if (longitudActual < longitudVieja) {
            longitudVieja = 0;
            longitudActual = 0;
            cargarCursos();
        }

        miCurso = (Curso) modelo.getSelectedItem();
        txtCodigo.setText(miCurso.getCodCurso());
        txtNPlazas.setText(Integer.toString(miCurso.getnPlazasDisp()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnDeshacer;
    private javax.swing.JComboBox<String> cmbCursos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNPlazas;
    // End of variables declaration//GEN-END:variables
}
